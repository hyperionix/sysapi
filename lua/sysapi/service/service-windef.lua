setfenv(1, require "sysapi-ns")
local bor = bit.bor

StringifyTableStart("SERVICE_TYPE")
SERVICE_KERNEL_DRIVER = 0x00000001
SERVICE_FILE_SYSTEM_DRIVER = 0x00000002
SERVICE_ADAPTER = 0x00000004
SERVICE_RECOGNIZER_DRIVER = 0x00000008
SERVICE_DRIVER = bor(SERVICE_KERNEL_DRIVER, SERVICE_FILE_SYSTEM_DRIVER, SERVICE_RECOGNIZER_DRIVER)
SERVICE_WIN32_OWN_PROCESS = 0x00000010
SERVICE_WIN32_SHARE_PROCESS = 0x00000020
SERVICE_WIN32 = bor(SERVICE_WIN32_OWN_PROCESS, SERVICE_WIN32_SHARE_PROCESS)
SERVICE_USER_SERVICE = 0x00000040
SERVICE_USERSERVICE_INSTANCE = 0x00000080
SERVICE_USER_SHARE_PROCESS = bor(SERVICE_USER_SERVICE, SERVICE_WIN32_SHARE_PROCESS)
SERVICE_USER_OWN_PROCESS = bor(SERVICE_USER_SERVICE, SERVICE_WIN32_OWN_PROCESS)
SERVICE_INTERACTIVE_PROCESS = 0x00000100
SERVICE_PKG_SERVICE = 0x00000200
SERVICE_TYPE_ALL =
  bor(
  SERVICE_WIN32,
  SERVICE_ADAPTER,
  SERVICE_DRIVER,
  SERVICE_INTERACTIVE_PROCESS,
  SERVICE_USER_SERVICE,
  SERVICE_USERSERVICE_INSTANCE,
  SERVICE_PKG_SERVICE
)
StringifyTableEnd()

SERVICE_ACTIVE = 0x00000001
SERVICE_INACTIVE = 0x00000002
SERVICE_STATE_ALL = bor(SERVICE_ACTIVE, SERVICE_INACTIVE)

StringifyTableStart("SERVICE_STATE")
SERVICE_STOPPED = 0x00000001
SERVICE_START_PENDING = 0x00000002
SERVICE_STOP_PENDING = 0x00000003
SERVICE_RUNNING = 0x00000004
SERVICE_CONTINUE_PENDING = 0x00000005
SERVICE_PAUSE_PENDING = 0x00000006
SERVICE_PAUSED = 0x00000007
StringifyTableEnd()

SC_MANAGER_CONNECT = 0x0001
SC_MANAGER_CREATE_SERVICE = 0x0002
SC_MANAGER_ENUMERATE_SERVICE = 0x0004
SC_MANAGER_LOCK = 0x0008
SC_MANAGER_QUERY_LOCK_STATUS = 0x0010
SC_MANAGER_MODIFY_BOOT_CONFIG = 0x0020
SC_MANAGER_ALL_ACCESS =
  bor(
  STANDARD_RIGHTS_REQUIRED,
  SC_MANAGER_CONNECT,
  SC_MANAGER_CREATE_SERVICE,
  SC_MANAGER_ENUMERATE_SERVICE,
  SC_MANAGER_LOCK,
  SC_MANAGER_QUERY_LOCK_STATUS,
  SC_MANAGER_MODIFY_BOOT_CONFIG
)

ffi.cdef [[
  typedef HANDLE SC_HANDLE;

  typedef struct _SERVICE_STATUS_PROCESS {
    DWORD dwServiceType;
    DWORD dwCurrentState;
    DWORD dwControlsAccepted;
    DWORD dwWin32ExitCode;
    DWORD dwServiceSpecificExitCode;
    DWORD dwCheckPoint;
    DWORD dwWaitHint;
    DWORD dwProcessId;
    DWORD dwServiceFlags;
  } SERVICE_STATUS_PROCESS, *LPSERVICE_STATUS_PROCESS;

  typedef struct _ENUM_SERVICE_STATUS_PROCESSA {
    LPSTR                     lpServiceName;
    LPSTR                     lpDisplayName;
    SERVICE_STATUS_PROCESS    ServiceStatusProcess;
  } ENUM_SERVICE_STATUS_PROCESSA, *LPENUM_SERVICE_STATUS_PROCESSA;
]]

ffi.cdef [[
  SC_HANDLE OpenSCManagerA(
    LPCSTR lpMachineName,
    LPCSTR lpDatabaseName,
    DWORD  dwDesiredAccess
  );

  BOOL CloseServiceHandle(
    SC_HANDLE hSCObject
  );
  
  SC_HANDLE OpenServiceA(
    SC_HANDLE hSCManager,
    LPCSTR    lpServiceName,
    DWORD     dwDesiredAccess
  );

  BOOL QueryServiceStatusEx(
    SC_HANDLE      hService,
    DWORD          InfoLevel,
    LPBYTE         lpBuffer,
    DWORD          cbBufSize,
    LPDWORD        pcbBytesNeeded
  );

  BOOL EnumServicesStatusExA(
    SC_HANDLE    hSCManager,
    DWORD        InfoLevel,
    DWORD        dwServiceType,
    DWORD        dwServiceState,
    LPBYTE       lpServices,
    DWORD        cbBufSize,
    LPDWORD      pcbBytesNeeded,
    LPDWORD      lpServicesReturned,
    LPDWORD      lpResumeHandle,
    LPCSTR       pszGroupName
  );
]]
